// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String    @unique
  password      String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Category {
  id                Int      @id @default(autoincrement())
  name              String
  parent_id         Int
  products          CategoryProduct[]
}

model Product {
  id                Int      @id @default(autoincrement())
  rack_name         String
  marketing_status  String
  hscode            String
  weight            Int
  name              String
  sku               Sku[]
  options           ProductOption[]
  variation         Variation[]
  order_items       OrderItem[]
  categories        CategoryProduct[]

}

model CategoryProduct {
  id          Int                 @id @default(autoincrement())
  product_id  Int
  cat_id      Int
  category    Category            @relation(fields: [cat_id], references: [id])

  product     Product             @relation(fields: [product_id], references: [id])

}

model ProductOption {
  id                Int       @id @default(autoincrement())
  product_id        Int
  name              String
  options           String[]

  product           Product   @relation(fields: [product_id], references: [id])
  
}

model Sku {
  id            String      @id
  stock         Int         @default(0)
  variation_id  Int         @unique
  product_id    Int
  last_restock  DateTime?
  variation     Variation   @relation(fields: [variation_id], references: [id])
  product       Product     @relation(fields: [product_id], references: [id])
}

model Variation {
  id              Int       @id @default(autoincrement())
  names           String[]  
  values          String[]
  price           Int
  product_id      Int
  is_default      Boolean     @default(false)
  sku             Sku?
  product         Product   @relation(fields: [product_id], references: [id])
  order_items     OrderItem[]
}


model Order {
  id              Int       @id @default(autoincrement())
  customer_id     Int
  status          StatusOrder
  items           OrderItem[]
  sub_total       Int
  total           Int
  customer        Customer  @relation(fields: [customer_id], references: [id])
  created DateTime  @default(now())
}

model Customer {
  id              Int       @id @default(autoincrement())
  phone           String    @unique
  address         String
  orders          Order[]
  created DateTime  @default(now())
}

model OrderItem {
  order_id        Int       
  product_id      Int
  sku_id          Int
  variation_id    Int
  count           Int
  order           Order     @relation(fields: [order_id], references: [id])
  product         Product   @relation(fields: [product_id], references: [id])
  variation       Variation @relation(fields: [variation_id], references: [id])

  @@id([product_id, sku_id])
}

model Promo {
  id      Int      @id @default(autoincrement())
  name    String
  type    DiscountType
  value   Int
}

model Supplier {
  id                Int                 @id @default(autoincrement())
  type_id           Int
  name              String
  note              String
  link              String
  restock_items    RestockItem[]
  stock_ongoing     Int                 @default(0)
  stock_ready       Int                 @default(0)
  type              SupplierType        @relation(fields: [type_id], references: [id])
  created           DateTime            @default(now())
}

model SupplierType {
  id                Int         @id @default(autoincrement())
  name              String      @unique
  suppliers         Supplier[]
}

model Rack {
  id      Int         @id @default(autoincrement())
  name    String      @unique
}

model Restock {
  id                        Int       @id @default(autoincrement())
  shipment_status           StatusShipment
  items                     RestockItem[]
  resi                      String?
  sub_total                 Int
  total                     Int
  created DateTime  @default(now())
}

model RestockItem {
  shipment_id         Int       
  supplier_id         Int
  sku_id              Int
  variation_id        Int
  count               Int
  restock             Restock  @relation(fields: [shipment_id], references: [id])
  supplier            Supplier  @relation(fields: [supplier_id], references: [id])

  @@id([shipment_id, sku_id])
}



enum Role {
  OWNER
  ADMIN
}

enum DiscountType {
  PERCENT
  FIXED
}

enum StatusOrder {
  COMPLETED
  PENDING
  CANCEL
  PROBLEM
}

enum StatusShipment {
  COMPLETED
  PROCESS
}
